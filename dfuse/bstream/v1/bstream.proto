syntax = "proto3";

package dfuse.bstream.v1;

import "google/protobuf/timestamp.proto";
import "google/protobuf/any.proto";

option go_package = "github.com/dfuse-io/pbgo/dfuse/bstream/v1;pbbstream";

service BlockStream {
  rpc Blocks(BlockRequest) returns (stream Block);
}

service BlockStreamV2 {
  rpc Blocks(BlocksRequestV2) returns (stream BlockResponseV2);
}


// Version 1 request

message BlockRequest {
  // Number of blocks we want to get in burst upon connection, on a best effort basis.
  int64 burst = 1;

  // Type of blocks we're after here, is it 'ethereum' data, 'eos', etc.. The server can fail early
  // if he doesn't match the data he serves (services mismatch, etc..)
  string content_type = 2;

  // Whether we can assume the data will come ordered, unless there is a chain reorganization.
  // mindreaders output ordered data, whereas relayers can output unordered data.
  // The server can fail early if the assumption of the caller cannot be fulfilled.
  enum Order {
    UNSPECIFIED = 0;
    ORDERED = 1;
    UNORDERED = 2;
  }
  Order order = 3;

  string requester = 4;
}

// Version 2 request

message IrreversibleBlocksRequestV2 {
  int64 start_block_num = 1;
}

// For historical segments, forks are not passed
message BlocksRequestV2 {
  // Block number to start at.
  // If NEGATIVE, resolves start block number relatively to the chain HEAD.
  // If `start_cursor` is passed, this value is ignored.
  int64 start_block_num = 1;
  // Start again from an opaque cursor, immediately after the Block pointed by the cursor.
  // Obtain this value from a previously received BlockResponseV2.cursor
  // This value takes precedence over `start_block_num`.
  string start_cursor = 13;

  // If non-zero, stream will close AFTER that block has passed (inclusive).
  uint64 stop_block_num = 5;

  //bool irreversible_only = 14;

  // Most common steps will be [STEP_IRREVERSIBLE], or [STEP_NEW, STEP_UNDO, STEP_IRREVERSIBLE]
  repeated ForkStep forks_steps = 8; // Filter the steps you want to see. If not specified, defaults to all steps.

  // The CEL filter expression used to include transactions,
  // specific to the target protocol, works
  // in combination with `exclude_filter_expr` value.
  string include_filter_expr = 10;

  // The CEL filter expression used to exclude transactions,
  // specific to the target protocol, works
  // in combination with `include_filter_expr` value.
  string exclude_filter_expr = 11;

  // Eventually, choose the backing source blocks (merged blocks location + corresponding relayers)
  //  string source_blocks = 0; // "full", "nospam", "system", "eosio"
}

/*


blocks() {
  block {
    ... on IrreversibleBlock {
    }
    ... on UndoBlock {
    }
  }
}

 */


message BlockResponseV2 {
  // Chain specific blocks:
  // * dfuse.ethereum.codec.v1.Block
  // * dfuse.eosio.codec.v1.Block
  // Chain agnostic block, when request asks for packed blocks:
  // * dfuse.bstream.v1.Block
  google.protobuf.Any block = 1;

  // oneof event {
  //   NewEvent new_event = 1;
  //   IrreversibleEvent irreversible_event = 1;
  //   message NewEvent {
  //     google.protobuf.Any block = 1;
  //     string cursor = 2;
  //   }
  //   message IrreversibleEvent {
  //     google.protobuf.Any block = 1;
  //   }
  // }

  bool undo = 5;
  ForkStep step = 6;
  bool irreversible = 9;

  // tu veux aller vite, pour éviter d'avoir le NEW et le IRREVERSIBLE steps
  // query avec steps == IRREVERSIBLE only.. on va t'envoyer des cursors
  // quand tu veux être real-time, tu me donne ce cursor là, et j'te donne les `NEW`
  // à partir de là.

  // je suis en NEW + IRREVERSIBLE
  // NEW: rev:00004242deabcdeasdlkjaslfdkjadslfkjaslkfjdsaf
  // IRR: rev:00004242deabcdeasdlkjaslfdkjadslfkjaslkfjdsaf:irr:62352341223 (12 in the past)
  // IRR: rev:00004242deabcdeasdlkjaslfdkjadslfkjaslkfjdsaf:irr:62352341224 (11 in the past)
  // IRR: rev:00004242deabcdeasdlkjaslfdkjadslfkjaslkfjdsaf:irr:62352341225 (10 in the past)
  // IRR: rev:00004242deabcdeasdlkjaslfdkjadslfkjaslkfjdsaf:irr:62352341226...
  // IRR: rev:00004242deabcdeasdlkjaslfdkjadslfkjaslkfjdsaf:irr:62352341227 (1 in the past)
  // NEW: rev:00004243deabcdeasdlkjaslfdkjadslfkjaslkfjdsaf
  // NEW: rev:00004244deabcdeasdlkjaslfdkjadslfkjaslkfjdsaf
  // NEW: rev:00004245deabcdeasdlkjaslfdkjadslfkjaslkfjdsaf
  // UNDO (w/ 45): rev:00004245deabcdeasdlkjaslfdkjadslfkjaslkfjdsaf:was_undo
  // NEW:  rev:00004245deabcdeasdlkjaslfdkjadslfkjaslkfjdsaf
  // UNDO: rev:00004244deabcdeasdlkjaslfdkjadslfkjaslkfjdsaf
  // UNDO: rev:00004243deabcdeasdlkjaslfdkjadslfkjaslkfjdsaf
  // NEW: rev:00004244mamamamama

  // je suis en IRREVERSIBLE only
  // IRR: irr:1231231232131
  string cursor = 10;
}

enum ForkStep {
  STEP_UNKNOWN = 0;
  STEP_NEW = 1; // The first time we see a block, that is linear with the previous block
  STEP_UNDO = 2; // A block seen previously, that is to be undone
  reserved 3; // was STEP_REDO
  STEP_IRREVERSIBLE = 4;
  reserved 5 ; // was STEP_STALLED
}

// General response and structs

message Block {
  uint64 number = 1;
  string id = 2;
  string previous_id = 3;
  google.protobuf.Timestamp timestamp = 4;
  uint64 lib_num = 5;

  Protocol payload_kind = 6;
  int32 payload_version = 7;
  bytes payload_buffer = 8;
}

message BlockRef {
  uint64 num = 1;
  string id = 2;
}

enum Protocol {
  UNKNOWN = 0;
  EOS = 1;
  ETH = 2;
}

syntax = "proto3";

package dfuse.bstream.v1;

import "google/protobuf/timestamp.proto";
import "google/protobuf/any.proto";

option go_package = "github.com/dfuse-io/pbgo/dfuse/bstream/v1;pbbstream";

service BlockStream {
  rpc Blocks(BlockRequest) returns (stream Block);
}

service BlockStreamV2 {
  rpc Blocks(BlocksRequestV2) returns (stream BlockResponseV2);
}


// Version 1 request

message BlockRequest {
  // Number of blocks we want to get in burst upon connection, on a best effort basis.
  int64 burst = 1;

  // Type of blocks we're after here, is it 'ethereum' data, 'eos', etc.. The server can fail early
  // if he doesn't match the data he serves (services mismatch, etc..)
  string content_type = 2;

  // Whether we can assume the data will come ordered, unless there is a chain reorganization.
  // mindreaders output ordered data, whereas relayers can output unordered data.
  // The server can fail early if the assumption of the caller cannot be fulfilled.
  enum Order {
    UNSPECIFIED = 0;
    ORDERED = 1;
    UNORDERED = 2;
  }
  Order order = 3;

  string requester = 4;
}

// Version 2 request

message BlocksRequestV2 {
  // Can be negative, will be resolved relative to the chain head. When not provided,
  // start at first streamable block of the chain.
  //
  // Not all chain starts at the same block number, so you might get an higher block than
  // requested when using default value of 0.
  int64 start_block_num = 1;

  string start_cursor = 2; // If provided, makes sure to restart at that exact block ID, and navigate forks from there.

  uint64 stop_block_num = 5; // If non-zero, stream will close after that block has passed.

  // The CEL filter expression used to include transactions, specific to the target protocol, works
  // in combination with `exclude_filter_expr` value.
  string include_filter_expr = 10;

  // The CEL filter expression used to exclude transactions, specific to the target protocol, works
  // in combination with `include_filter_expr` value.
  string exclude_filter_expr = 11;

  // **Warning** Experimental API, controls how blocks are trimmed for extraneous information before
  // being sent back. The actual trimming is chain dependent.
  WithDetails with_details = 15;

  // Eventually, choose the backing source blocks (merged blocks location + corresponding relayers)
  //  string source_blocks = 0; // "full", "nospam", "system", "eosio"
}

message BlockResponseV2 {
  // Chain specific blocks:
  // * dfuse.ethereum.codec.v1.Block
  // * dfuse.eosio.codec.v1.Block
  // Chain agnostic block, when request asks for packed blocks:
  // * dfuse.bstream.v1.Block
  google.protobuf.Any block = 1;

  bool undo = 5;
  ForkStep step = 6;
  uint64 step_count = 7; // Number of steps in a stride (when passing irrersibility, multiple blocks are passed in a swift)
  uint64 step_index = 8; // Index of the step in this stride
  bool known_to_be_irreversible = 9;
}

enum ForkStep {
  STEP_UNKNOWN = 0;
  STEP_NEW = 1; // The first time we see a block, that is linear with the previous block
  STEP_UNDO = 2; // A block seen previously, that is to be undone
  STEP_REDO = 3; // After a re-org, you might see a REDO which is similar to NEW, except that you've seen it already.
  STEP_IRREVERSIBLE = 4;
  STEP_STALLED = 5;
}

enum WithDetails {
  FULL_DETAILS = 0;
  LIGHT_DETAILS = 1;
}

// General response and structs

message Block {
  uint64 number = 1;
  string id = 2;
  string previous_id = 3;
  google.protobuf.Timestamp timestamp = 4;
  uint64 lib_num = 5;

  Protocol payload_kind = 6;
  int32 payload_version = 7;
  bytes payload_buffer = 8;
}

message BlockRef {
  uint64 num = 1;
  string id = 2;
}

enum Protocol {
  UNKNOWN = 0;
  EOS = 1;
  ETH = 2;
}
